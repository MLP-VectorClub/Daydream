/* tslint:disable */
/*
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 * DO NOT EDIT THIS FILE DIRECTLY! - GENERATE IT USING npm run gen-api-types INSTEAD
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 */

export interface ServerResponse {
  /**
   * Indicates whether the request was successful
   */
  status: boolean;
  /**
   * A translation key pointing to a message that explains the outcome of the request, typically used for errors
   */
  message?: string;
}

export type PagedServerResponse = ServerResponse & PageData;

/**
 * A query parameter used for specifying which page is currently being displayed
 */
export type PageNumber = number;

export type File = string;

export type QueryString = string;

export type OneBasedId = number;

export type ZeroBasedId = number;

export interface PageData {
  pagination: {
    currentPage: number;
    totalPages: number;
    totalItems: number;
    itemsPerPage: number;
  };
}

/**
 * Contains information about the server's current revision
 */
export interface GitInfo {
  commitId: string;
  commitTime: string;
}

/**
 * An array of less resource intensive appearances under the appearances key
 */
export interface SlimAppearanceList {
  appearances: (SlimAppearance)[];
}

/**
 * An array of appearances under the appearances key
 */
export interface AppearanceList {
  appearances: (Appearance)[];
}

/**
 * Optional parameter that indicates whether you would like to get preview image data with the request. Typically unneccessary unless you want to display a temporary image while the larger image loads.
 */
export type PreviewsIndicator = true;

/**
 * Used for displaying items in a specific order. The API guarantees that array return values are sorted in ascending order based on this property.
 */
export type Order = number;

/**
 * A less heavy version of the regular Appearance schema
 */
export interface SlimAppearance {
  id: ZeroBasedId;
  /**
   * The name of the appearance
   */
  label: string;
  added: string;
  notes: string;
  tags: (SlimGuideTag)[];
  /**
   * The sprite that belongs to this appearance, or null if there is none
   */
  sprite: Sprite;
  /**
   * Indicates whether there are any cutie marks tied to this appearance
   */
  hasCutieMarks: boolean;
}

/**
 * Array of color groups under the `colorGroups` key
 */
export interface ListOfColorGroups {
  /**
   * Array of color groups belonging to an appearance (may be an empty array).
   */
  colorGroups: (ColorGroup)[];
}

/**
 * Represents an entry in the color guide
 */
export type Appearance = SlimAppearance & ListOfColorGroups;

export interface SlimGuideTag {
  id?: OneBasedId;
  /**
   * Tag name (all lowercase)
   */
  name?: string;

  [k: string]: any;
}

/**
 * Data related to an appearance's sprite file. The actual file is available from a different endpoint.
 */
export interface Sprite {
  /**
   * MD5 hash of the current sprite image
   */
  hash: SpriteHash;
  /**
   * Data URI for a small preview image with matching proportions to the actual image, suitable for displaying as a preview while the full image loads. May not be sent based on the request parameters.
   */
  preview?: string;
}

/**
 * Groups a list of colors
 */
export interface ColorGroup {
  id: OneBasedId;
  /**
   * The name of the color group
   */
  label: string;
  order: Order;
  /**
   * The list of colors inside this group
   */
  colors: (Color)[];
}

/**
 * A color entry. Colors may link to other colors, in which case `linkedTo` will be set to the link target, but `hex` will always point to the value that should be displayed.
 */
export interface Color {
  id: OneBasedId;
  /**
   * The name of the color
   */
  label: string;
  order: Order;
  /**
   * The color value in uppercase hexadecimal form, including a # prefix
   */
  hex: string;
  linkedTo?: Color;
}

export type GuideName = 'pony' | 'eqg';

export type GuidePageSize = number;

export interface CacheIndicator {
  /**
   * Indicates when a cached resource was last updated with fresh data
   */
  cachedOn: string;
  /**
   * How long the data is cached for (in seconds)
   */
  cachedFor: number;
}

export type SpriteSize = 300 | 600;

export type SpriteHash = string;

export type AppearanceToken = string;

/**
 * List of roles a user can have
 */
export type UserRole = 'guest' | 'user' | 'member' | 'assistant' | 'staff' | 'admin' | 'developer';

/**
 * List of supported avatar providers
 */
export type AvatarProvider = 'deviantart' | 'discord';

/**
 * A user's data under the user key
 */
export interface ValueOfUser {
  user: User;
}

export interface SessionUpdating {
  /**
   * If this value is true the DeviantArt access token expired and the backend is updating it in the background. Future requests should be made to the appropriate endpoint periodically (TODO) to check whether the session update was successful and the user should be logged out if it wasn't.
   */
  sessionUpdating: boolean;
}

/**
 * Represents an authenticated user
 */
export interface User {
  id: string;
  name: string;
  role: UserRole;
  avatarUrl: string;
  avatarProvider: AvatarProvider;
}

export interface AppControllersApiAboutControllerServerRequest {
}
export interface AppControllersApiAppearancesControllerQueryPublicRequest {
  guide: GuideName
  page: PageNumber
  size: GuidePageSize
  q: QueryString
  previews: PreviewsIndicator
}

export interface AppControllersApiAppearancesControllerQueryAllRequest {
  guide: GuideName
  previews: PreviewsIndicator
}

export interface AppControllersApiAppearancesControllerGetColorGroupsRequest {
  id: ZeroBasedId
}
export interface AppControllersApiAppearancesControllerSpriteRequest {
  id: ZeroBasedId
  size: SpriteSize
  token: AppearanceToken
  hash: SpriteHash
}

export interface AppControllersApiUsersControllerMeRequest {
}

export type AppControllersApiAboutControllerServerResult = ServerResponse & {
  git: GitInfo;
};

export type AppControllersApiAppearancesControllerQueryPublicResult = PagedServerResponse &
  AppearanceList;

export type AppControllersApiAppearancesControllerQueryAllResult = ServerResponse &
  SlimAppearanceList &
  CacheIndicator;

export type AppControllersApiAppearancesControllerGetColorGroupsResult = ServerResponse &
  ListOfColorGroups;

export type AppControllersApiAppearancesControllerSpriteResult = any
export type AppControllersApiUsersControllerMeResult = ServerResponse &
  ValueOfUser &
  SessionUpdating;
